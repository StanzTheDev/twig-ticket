<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tickets - Paseo</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body>
    <div class="min-h-screen bg-slate-50">
        <header class="bg-white border-b border-slate-200">
            <div class="max-w-7xl mx-auto px-6">
                <div class="flex justify-between items-center h-16">
                    <div class="flex items-center space-x-8">
                        <div class="flex items-center space-x-2">
                            <div class="w-8 h-8 rounded-lg bg-slate-800 flex items-center justify-center">
                                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 5v2m0 4v2m0 4v2M5 5a2 2 0 00-2 2v3a2 2 0 110 4v3a2 2 0 002 2h14a2 2 0 002-2v-3a2 2 0 110-4V7a2 2 0 00-2-2H5z" />
                                </svg>
                            </div>
                            <span class="text-lg font-semibold text-slate-900">Paseo</span>
                        </div>
                        <nav class="hidden md:flex space-x-1">
                            <a href="?page=dashboard" class="px-3 py-2 text-sm text-slate-600 hover:text-slate-900 rounded-lg hover:bg-slate-100 transition">
                                Dashboard
                            </a>
                            <a href="?page=ticket" class="px-3 py-2 text-sm text-slate-900 bg-slate-100 rounded-lg font-medium">
                                Tickets
                            </a>
                        </nav>
                    </div>
                    
                    <div class="flex items-center space-x-4">
                        <span class="text-sm text-slate-600">Hello, <span id="userName">User</span></span>
                        <button id="logoutButton" class="text-sm text-slate-600 hover:text-slate-900 transition">
                            Logout
                        </button>
                    </div>
                </div>
            </div>
        </header>

        <main class="max-w-7xl mx-auto py-8 px-6">
            <div class="flex justify-between items-start mb-8">
                <div>
                    <h1 class="text-2xl font-semibold text-slate-900 mb-1">Tickets</h1>
                    <p class="text-slate-600 text-sm">Manage and track support tickets</p>
                </div>
                <button
                    id="newTicketBtn"
                    class="bg-slate-900 text-white px-4 py-2 rounded-lg hover:bg-slate-800 transition text-sm font-medium"
                >
                    New Ticket
                </button>
            </div>

            <div class="bg-white rounded-lg border border-slate-200 p-4 mb-6">
                <div class="flex flex-wrap gap-2" id="filterButtons">
                </div>
            </div>

            <div class="space-y-3" id="ticketsList">
            </div>

            <div id="emptyState" class="bg-white rounded-lg border border-slate-200 p-12 text-center hidden">
                <div class="w-16 h-16 rounded-full bg-slate-100 flex items-center justify-center mx-auto mb-4">
                    <svg class="w-8 h-8 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 5v2m0 4v2m0 4v2M5 5a2 2 0 00-2 2v3a2 2 0 110 4v3a2 2 0 002 2h14a2 2 0 002-2v-3a2 2 0 110-4V7a2 2 0 00-2-2H5z" />
                    </svg>
                </div>
                <h3 class="text-lg font-semibold text-slate-900 mb-1">No tickets found</h3>
                <p class="text-slate-600 text-sm mb-4" id="emptyStateMessage">
                    Create your first ticket to get started
                </p>
                <button
                    id="emptyStateBtn"
                    class="bg-slate-900 text-white px-4 py-2 rounded-lg hover:bg-slate-800 transition text-sm font-medium"
                >
                    New Ticket
                </button>
            </div>

            <div id="ticketModal" class="fixed inset-0 bg-slate-900/20 backdrop-blur-sm flex items-center justify-center p-4 z-50 hidden">
                <div class="bg-white rounded-xl border border-slate-200 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
                    <div class="p-6">
                        <h2 class="text-xl font-semibold text-slate-900 mb-5" id="modalTitle">
                            New Ticket
                        </h2>
                        
                        <form id="ticketForm" class="space-y-5">
                            <div>
                                <label class="block text-sm font-medium text-slate-700 mb-1.5">
                                    Title
                                </label>
                                <input
                                    type="text"
                                    id="ticketTitle"
                                    name="title"
                                    class="w-full px-4 py-2.5 border border-slate-300 rounded-lg focus:ring-2 focus:ring-slate-900 focus:border-slate-900 outline-none transition text-slate-900"
                                    placeholder="Enter ticket title"
                                />
                                <p class="text-rose-600 text-xs mt-1 hidden" id="titleError"></p>
                            </div>

                            <div>
                                <label class="block text-sm font-medium text-slate-700 mb-1.5">
                                    Description
                                </label>
                                <textarea
                                    id="ticketDescription"
                                    name="description"
                                    rows="4"
                                    class="w-full px-4 py-2.5 border border-slate-300 rounded-lg focus:ring-2 focus:ring-slate-900 focus:border-slate-900 outline-none transition text-slate-900"
                                    placeholder="Describe the issue..."
                                ></textarea>
                                <p class="text-rose-600 text-xs mt-1 hidden" id="descriptionError"></p>
                            </div>

                            <div class="grid grid-cols-2 gap-4">
                                <div>
                                    <label class="block text-sm font-medium text-slate-700 mb-1.5">
                                        Status
                                    </label>
                                    <select
                                        id="ticketStatus"
                                        name="status"
                                        class="w-full px-4 py-2.5 border border-slate-300 rounded-lg focus:ring-2 focus:ring-slate-900 focus:border-slate-900 outline-none transition text-slate-900"
                                    >
                                        <option value="open">Open</option>
                                        <option value="in_progress">In Progress</option>
                                        <option value="closed">Closed</option>
                                    </select>
                                </div>

                                <div>
                                    <label class="block text-sm font-medium text-slate-700 mb-1.5">
                                        Priority
                                    </label>
                                    <select
                                        id="ticketPriority"
                                        name="priority"
                                        class="w-full px-4 py-2.5 border border-slate-300 rounded-lg focus:ring-2 focus:ring-slate-900 focus:border-slate-900 outline-none transition text-slate-900"
                                    >
                                        <option value="low">Low</option>
                                        <option value="medium">Medium</option>
                                        <option value="high">High</option>
                                    </select>
                                </div>
                            </div>

                            <div class="flex justify-end space-x-3 pt-5 border-t border-slate-200">
                                <button
                                    type="button"
                                    id="cancelModalBtn"
                                    class="px-4 py-2 text-slate-600 hover:text-slate-900 transition text-sm"
                                >
                                    Cancel
                                </button>
                                <button
                                    type="submit"
                                    id="submitModalBtn"
                                    class="bg-slate-900 text-white px-4 py-2 rounded-lg hover:bg-slate-800 transition text-sm font-medium"
                                >
                                    Create
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <div id="deleteModal" class="fixed inset-0 bg-slate-900/20 backdrop-blur-sm flex items-center justify-center p-4 z-50 hidden">
                <div class="bg-white rounded-xl border border-slate-200 w-full max-w-md">
                    <div class="p-6">
                        <h2 class="text-lg font-semibold text-slate-900 mb-2">Delete ticket?</h2>
                        <p class="text-slate-600 text-sm mb-5">
                            Are you sure you want to delete "<strong id="deleteTicketTitle"></strong>"? This cannot be undone.
                        </p>
                        <div class="flex justify-end space-x-3">
                            <button
                                id="cancelDeleteBtn"
                                class="px-4 py-2 text-slate-600 hover:text-slate-900 transition text-sm"
                            >
                                Cancel
                            </button>
                            <button
                                id="confirmDeleteBtn"
                                class="bg-rose-600 text-white px-4 py-2 rounded-lg hover:bg-rose-700 transition text-sm font-medium"
                            >
                                Delete
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <script>
document.addEventListener('DOMContentLoaded', () => {
    let tickets = [];
    let currentFilter = 'all';
    let editingTicketId = null;
    let deleteTicketId = null;
    let user = null;

    const ticketsList = document.getElementById('ticketsList');
    const filterButtons = document.getElementById('filterButtons');
    const ticketModal = document.getElementById('ticketModal');
    const deleteModal = document.getElementById('deleteModal');
    const ticketForm = document.getElementById('ticketForm');
    const emptyState = document.getElementById('emptyState');
    
    const ticketTitle = document.getElementById('ticketTitle');
    const ticketDescription = document.getElementById('ticketDescription');
    const ticketStatus = document.getElementById('ticketStatus');
    const ticketPriority = document.getElementById('ticketPriority');
    const modalTitle = document.getElementById('modalTitle');
    const submitModalBtn = document.getElementById('submitModalBtn');

    const newTicketBtn = document.getElementById('newTicketBtn');
    const emptyStateBtn = document.getElementById('emptyStateBtn');
    const cancelModalBtn = document.getElementById('cancelModalBtn');
    const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');
    const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
    const logoutButton = document.getElementById('logoutButton');

    const getStatusColor = (status) => {
        switch (status) {
            case 'open': return 'bg-emerald-50 text-emerald-700 border-emerald-200';
            case 'in_progress': return 'bg-amber-50 text-amber-700 border-amber-200';
            case 'closed': return 'bg-slate-100 text-slate-600 border-slate-200';
            default: return 'bg-slate-100 text-slate-600 border-slate-200';
        }
    };

    const getPriorityColor = (priority) => {
        switch (priority) {
            case 'high': return 'bg-rose-50 text-rose-700 border-rose-200';
            case 'medium': return 'bg-blue-50 text-blue-700 border-blue-200';
            case 'low': return 'bg-slate-100 text-slate-600 border-slate-200';
            default: return 'bg-slate-100 text-slate-600 border-slate-200';
        }
    };

    const getFilteredTickets = () => {
        if (currentFilter === 'all') return tickets;
        return tickets.filter(ticket => ticket.status === currentFilter);
    };

    const checkAuth = () => {
        const savedUser = localStorage.getItem('user');
        if (!savedUser) {
            window.location.href = '?page=login';
            return false;
        }
        user = JSON.parse(savedUser);
        return true;
    };

    const loadTickets = () => {
        if (!checkAuth()) return;
        
        const savedTickets = localStorage.getItem(`tickets_${user.id}`);
        if (savedTickets) {
            tickets = JSON.parse(savedTickets);
        } else {
            tickets = [];
            localStorage.setItem(`tickets_${user.id}`, JSON.stringify(tickets));
        }
    };

    const updateUserInfo = () => {
        if (user) {
            document.getElementById('userName').textContent = user.name;
        }
    };

    const saveTickets = () => {
        localStorage.setItem(`tickets_${user.id}`, JSON.stringify(tickets));
    };

    const validateForm = () => {
        let isValid = true;
        const titleError = document.getElementById('titleError');
        const descriptionError = document.getElementById('descriptionError');
        titleError.classList.add('hidden');
        descriptionError.classList.add('hidden');
        ticketTitle.classList.remove('border-rose-300');
        ticketDescription.classList.remove('border-rose-300');

        if (!ticketTitle.value.trim()) {
            titleError.textContent = 'Title is required';
            titleError.classList.remove('hidden');
            ticketTitle.classList.add('border-rose-300');
            isValid = false;
        } else if (ticketTitle.value.length < 3) {
            titleError.textContent = 'Title must be at least 3 characters';
            titleError.classList.remove('hidden');
            ticketTitle.classList.add('border-rose-300');
            isValid = false;
        }

        if (!ticketDescription.value.trim()) {
            descriptionError.textContent = 'Description is required';
            descriptionError.classList.remove('hidden');
            ticketDescription.classList.add('border-rose-300');
            isValid = false;
        } else if (ticketDescription.value.length < 10) {
            descriptionError.textContent = 'Description must be at least 10 characters';
            descriptionError.classList.remove('hidden');
            ticketDescription.classList.add('border-rose-300');
            isValid = false;
        }

        return isValid;
    };

    const renderFilters = () => {
        const counts = {
            all: tickets.length,
            open: tickets.filter(t => t.status === 'open').length,
            in_progress: tickets.filter(t => t.status === 'in_progress').length,
            closed: tickets.filter(t => t.status === 'closed').length
        };

        const filters = [
            { value: 'all', label: 'All', count: counts.all },
            { value: 'open', label: 'Open', count: counts.open },
            { value: 'in_progress', label: 'In Progress', count: counts.in_progress },
            { value: 'closed', label: 'Closed', count: counts.closed }
        ];

        filterButtons.innerHTML = filters.map(filter => `
            <button
                data-filter="${filter.value}"
                class="filter-btn px-3 py-1.5 rounded-lg transition text-sm font-medium ${
                    currentFilter === filter.value 
                        ? 'bg-slate-900 text-white' 
                        : 'bg-slate-100 text-slate-700 hover:bg-slate-200'
                }"
            >
                ${filter.label} (${filter.count})
            </button>
        `).join('');

        document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                currentFilter = btn.dataset.filter;
                renderFilters();
                renderTickets();
            });
        });
    };

    const renderTickets = () => {
        const filteredTickets = getFilteredTickets();

        if (filteredTickets.length === 0) {
            ticketsList.classList.add('hidden');
            emptyState.classList.remove('hidden');
            
            const message = currentFilter === 'all' 
                ? 'Create your first ticket to get started' 
                : `No ${currentFilter.replace('_', ' ')} tickets`;
            document.getElementById('emptyStateMessage').textContent = message;
        } else {
            ticketsList.classList.remove('hidden');
            emptyState.classList.add('hidden');

            ticketsList.innerHTML = filteredTickets.map(ticket => `
                <div class="bg-white rounded-lg border border-slate-200 p-5 hover:border-slate-300 transition">
                    <div class="flex justify-between items-start mb-3">
                        <div class="flex-1">
                            <h3 class="text-base font-semibold text-slate-900 mb-1">${ticket.title}</h3>
                            <p class="text-slate-600 text-sm leading-relaxed">${ticket.description}</p>
                        </div>
                        <div class="flex space-x-3 ml-4">
                            <button
                                data-edit="${ticket.id}"
                                class="edit-btn text-slate-600 hover:text-slate-900 transition text-sm"
                            >
                                Edit
                            </button>
                            <button
                                data-delete="${ticket.id}"
                                class="delete-btn text-slate-600 hover:text-rose-600 transition text-sm"
                            >
                                Delete
                            </button>
                        </div>
                    </div>

                    <div class="flex flex-wrap items-center gap-2 text-xs">
                        <span class="px-2 py-1 rounded-md font-medium border ${getStatusColor(ticket.status)}">
                            ${ticket.status.replace('_', ' ')}
                        </span>
                        
                        <span class="px-2 py-1 rounded-md font-medium border ${getPriorityColor(ticket.priority)}">
                            ${ticket.priority}
                        </span>
                        
                        <span class="text-slate-500">
                            ${new Date(ticket.createdAt).toLocaleDateString()}
                        </span>
                    </div>
                </div>
            `).join('');

            document.querySelectorAll('.edit-btn').forEach(btn => {
                btn.addEventListener('click', () => openEditModal(btn.dataset.edit));
            });

            document.querySelectorAll('.delete-btn').forEach(btn => {
                btn.addEventListener('click', () => openDeleteModal(btn.dataset.delete));
            });
        }
    };

    const openCreateModal = () => {
        editingTicketId = null;
        modalTitle.textContent = 'New Ticket';
        submitModalBtn.textContent = 'Create';
       
        ticketTitle.value = '';
        ticketDescription.value = '';
        ticketStatus.value = 'open';
        ticketPriority.value = 'medium';
        
        document.getElementById('titleError').classList.add('hidden');
        document.getElementById('descriptionError').classList.add('hidden');
        ticketTitle.classList.remove('border-rose-300');
        ticketDescription.classList.remove('border-rose-300');
        
        ticketModal.classList.remove('hidden');
    };

    const openEditModal = (ticketId) => {
        const ticket = tickets.find(t => t.id === ticketId);
        if (!ticket) return;

        editingTicketId = ticketId;
        modalTitle.textContent = 'Edit Ticket';
        submitModalBtn.textContent = 'Update';
        
        ticketTitle.value = ticket.title;
        ticketDescription.value = ticket.description;
        ticketStatus.value = ticket.status;
        ticketPriority.value = ticket.priority;
        
        ticketModal.classList.remove('hidden');
    };

    const closeModal = () => {
        ticketModal.classList.add('hidden');
        editingTicketId = null;
    };

    const openDeleteModal = (ticketId) => {
        const ticket = tickets.find(t => t.id === ticketId);
        if (!ticket) return;

        deleteTicketId = ticketId;
        document.getElementById('deleteTicketTitle').textContent = ticket.title;
        deleteModal.classList.remove('hidden');
    };

    const closeDeleteModal = () => {
        deleteModal.classList.add('hidden');
        deleteTicketId = null;
    };

    const createTicket = () => {
        if (!validateForm()) return;

        const newTicket = {
            id: Date.now().toString(),
            title: ticketTitle.value.trim(),
            description: ticketDescription.value.trim(),
            status: ticketStatus.value,
            priority: ticketPriority.value,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString(),
            userId: user.id
        };

        tickets.push(newTicket);
        saveTickets(); 
        closeModal();
        renderFilters();
        renderTickets();
    };

    const updateTicket = () => {
        if (!validateForm()) return;

        const index = tickets.findIndex(t => t.id === editingTicketId);
        if (index === -1) return;

        tickets[index] = {
            ...tickets[index],
            title: ticketTitle.value.trim(),
            description: ticketDescription.value.trim(),
            status: ticketStatus.value,
            priority: ticketPriority.value,
            updatedAt: new Date().toISOString()
        };

        saveTickets();
        closeModal();
        renderFilters();
        renderTickets();
    };

    const deleteTicket = () => {
        tickets = tickets.filter(t => t.id !== deleteTicketId);
        saveTickets(); 
        closeDeleteModal();
        renderFilters();
        renderTickets();
    };

    newTicketBtn.addEventListener('click', openCreateModal);
    emptyStateBtn.addEventListener('click', openCreateModal);
    cancelModalBtn.addEventListener('click', closeModal);
    cancelDeleteBtn.addEventListener('click', closeDeleteModal);
    confirmDeleteBtn.addEventListener('click', deleteTicket);

    ticketForm.addEventListener('submit', (e) => {
        e.preventDefault();
        if (editingTicketId) {
            updateTicket();
        } else {
            createTicket();
        }
    });

    ticketTitle.addEventListener('input', () => {
        document.getElementById('titleError').classList.add('hidden');
        ticketTitle.classList.remove('border-rose-300');
    });

    ticketDescription.addEventListener('input', () => {
        document.getElementById('descriptionError').classList.add('hidden');
        ticketDescription.classList.remove('border-rose-300');
    });

    ticketModal.addEventListener('click', (e) => {
        if (e.target === ticketModal) closeModal();
    });

    deleteModal.addEventListener('click', (e) => {
        if (e.target === deleteModal) closeDeleteModal();
    });

    logoutButton.addEventListener('click', () => {
        if (confirm('Are you sure you want to logout?')) {
            localStorage.removeItem('user');
            window.location.href = '?page=login';
        }
    });

    loadTickets();
    updateUserInfo();
    renderFilters();
    renderTickets();
});
    </script>
</body>
</html>